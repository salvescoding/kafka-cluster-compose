version: '2.1'

services:
  zoo1:
    image: zookeeper:3.4.9
    hostname: zoo1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
      - ./zk-single-kafka-multiple/zoo1/data:/data
      - ./zk-single-kafka-multiple/zoo1/datalog:/datalog

  kafka1:
    image: confluentinc/cp-kafka:5.5.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./zk-single-kafka-multiple/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1

  kafka2:
    image: confluentinc/cp-kafka:5.5.0
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./zk-single-kafka-multiple/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zoo1


  kafka3:
    image: confluentinc/cp-kafka:5.5.0
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./zk-single-kafka-multiple/kafka3/data:/var/lib/kafka/data
    depends_on:
      - zoo1

  # Producer kafka
  kafka-franz:
    image: quarkus-quickstarts/kafka-streams-franz:1.0
    container_name: franz
    build:
      context: ../kafka-franz
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka1:19092, kafka2:19093, kafka3:19094"
    
  # Consumer One
  kafka-reco-one:
    image: quarkus-quickstarts/kafka-streams-reco:1.0
    container_name: reco-one
    build:
      context: ../kafka-reco
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
    ports: 
      - "8081:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka1:19092, kafka2:19093, kafka3:19094"
  
  # Consumer Two
  kafka-reco-two:
    image: quarkus-quickstarts/kafka-streams-reco:1.0
    container_name: reco-two
    build:
      context: ../kafka-reco
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
    ports: 
      - "8082:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka1:19092, kafka2:19093, kafka3:19094"
    
   ### Metrics 
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    volumes: 
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus:/prometheus
    command: 
      - --config.file=/etc/prometheus/prometheus.yml
    depends_on:
    - kafka-franz
    - kafka-reco-one
    - kafka-reco-two 

  ## Visualization for metrics
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    environment: 
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./grafana/data:/var/lib/grafana
    depends_on:
      - prometheus
      - kafka-franz
      - kafka-reco-one
      - kafka-reco-two 

  ## Metrics exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports: 
      - 9100:9100
  pushgateway:
    image: prom/pushgateway:latest
    container_name: pushgateway
    ports: 
      - 9091:9091
  

  kafka_exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka_exporter
    restart: always
    depends_on: 
      - kafka2
      - kafka1
      - kafka3
    command: --kafka.server=kafka1:19092 --kafka.server=kafka2:19093 --kafka.server=kafka3:19094
    ports: 
      - 9308:9308